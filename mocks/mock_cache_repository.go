// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/redis/cache_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCacheRepository is a mock of CacheRepository interface.
type MockCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryMockRecorder
}

// MockCacheRepositoryMockRecorder is the mock recorder for MockCacheRepository.
type MockCacheRepositoryMockRecorder struct {
	mock *MockCacheRepository
}

// NewMockCacheRepository creates a new mock instance.
func NewMockCacheRepository(ctrl *gomock.Controller) *MockCacheRepository {
	mock := &MockCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepository) EXPECT() *MockCacheRepositoryMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockCacheRepository) GetBalance(ctx context.Context, userID string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockCacheRepositoryMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockCacheRepository)(nil).GetBalance), ctx, userID)
}

// InvalidateBalance mocks base method.
func (m *MockCacheRepository) InvalidateBalance(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateBalance", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateBalance indicates an expected call of InvalidateBalance.
func (mr *MockCacheRepositoryMockRecorder) InvalidateBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateBalance", reflect.TypeOf((*MockCacheRepository)(nil).InvalidateBalance), ctx, userID)
}

// SetBalance mocks base method.
func (m *MockCacheRepository) SetBalance(ctx context.Context, userID string, balance float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBalance", ctx, userID, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockCacheRepositoryMockRecorder) SetBalance(ctx, userID, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockCacheRepository)(nil).SetBalance), ctx, userID, balance)
}
